{"version":3,"sources":["components/Header/index.tsx","components/App/index.tsx","serviceWorker.ts","index.tsx"],"names":["Header","className","viewBox","xmlns","d","href","Index","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+OAEaA,G,UAAS,kBACpB,gCACE,yBAAKC,UAAU,mDACb,yBAAKA,UAAU,mDACb,yBAAKA,UAAU,mCACb,0BAAMA,UAAU,iDAAhB,UAGJ,yBAAKA,UAAU,mBACb,4BACEA,UAAU,mHACV,yBAAKA,UAAU,uBAAuBC,QAAQ,YAAYC,MAAM,8BAA6B,uCAC3F,0BAAMC,EAAE,mDAId,yBAAKH,UAAU,4DACb,yBAAKA,UAAU,wBACb,uBAAGI,KAAK,qBAAqBJ,UAAU,iGACrC,wCACA,uBAAGA,UAAU,4CAEf,uBAAGI,KAAK,qBAAqBJ,UAAU,iGACrC,yCACA,uBAAGA,UAAU,4CAEf,uBAAGI,KAAK,qBAAqBJ,UAAU,iGACrC,yDACA,uBAAGA,UAAU,kDClBVK,EARS,WACtB,OACE,yBAAKL,UAAU,OACb,kBAAC,EAAD,QCKcM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.66bcad3e.chunk.js","sourcesContent":["import React from 'react'\n\nexport const Header = () => (\n  <header>\n    <nav className=\"flex items-center justify-between flex-wrap p-6\">\n      <div className=\"flex items-center flex-shrink-0 text-black mr-6\">\n        <div className=\"bg-yellow-500 rounded px-3 py-1\">\n          <span className=\"font-sans font-black tracking-tighter text-xl\">IMDb</span>\n        </div>\n      </div>\n      <div className=\"block md:hidden\">\n        <button\n          className=\"flex items-center px-3 py-2 border rounded text-gray-200 border-gray-400 hover:text-gray-800 hover:border-white\">\n          <svg className=\"fill-current h-3 w-3\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><title>Menu</title>\n            <path d=\"M0 3h20v2H0V3zm0 6h20v2H0V9zm0 6h20v2H0v-2z\" />\n          </svg>\n        </button>\n      </div>\n      <div className=\"w-full block flex-grow md:flex md:items-center md:w-auto\">\n        <div className=\"text-sm md:flex-grow\">\n          <a href=\"#responsive-header\" className=\"font-rubik font-medium block mt-4 md:inline-block md:mt-0 text-black hover:text-gray-800 mr-4\">\n            <span>Movies</span>\n            <i className=\"icon font-bold ion-ios-arrow-down ml-3\"/>\n          </a>\n          <a href=\"#responsive-header\" className=\"font-rubik font-medium block mt-4 md:inline-block md:mt-0 text-black hover:text-gray-800 mr-4\">\n            <span>TV Show</span>\n            <i className=\"icon font-bold ion-ios-arrow-down ml-3\"/>\n          </a>\n          <a href=\"#responsive-header\" className=\"font-rubik font-medium block mt-4 md:inline-block md:mt-0 text-black hover:text-gray-800 mr-4\">\n            <span>Celebs, Events & Photos</span>\n            <i className=\"icon font-bold ion-ios-arrow-down ml-3\"/>\n          </a>\n        </div>\n      </div>\n    </nav>\n  </header>\n);\n","import React from 'react';\nimport './App.css';\nimport { Header } from \"../Header\";\n\nconst Index: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <Header />\n    </div>\n  );\n};\n\nexport default Index;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/styles/tailwind.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}